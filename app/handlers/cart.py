from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, ShippingQuery
from aiogram.filters import CommandStart
from aiogram.enums import ContentType
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import asyncio
import os
from dotenv import load_dotenv, find_dotenv

from app import keyboards
from app.database import get_user_data_by_user_id, get_data_by_id, add_order_db

load_dotenv(find_dotenv())

cart_router = Router()


class NewOrder(StatesGroup):
    user_id = State()
    order = State()
    total_cost = State()
    full_name = State()
    adress = State()
    phone = State()
    email = State()
    
    
    
@cart_router.message(F.text == "üö´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cancel_order(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboards.start_admin_keyboard)
    else:
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboards.start_keyboard)
        
        
@cart_router.message(F.text == "üîÅ–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
async def reset_order(message: Message, state: FSMContext):
    await state.clear()
    await cart(message, state)


@cart_router.message(F.text == "üì¶–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def cart(message: Message, state: FSMContext):
    await message.answer("‚ñ´Ô∏è–í–∞—à –∑–∞–∫–∞–∑:", reply_markup=keyboards.cancel_order)
    data = await get_user_data_by_user_id(message.from_user.id)
    cart = data[4]
    order = []
    total_cost = 0
    if cart is None:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        await state.set_state(NewOrder.order)
        cart = cart.split(', ')
        for i in range(len(cart)):
            item = await get_data_by_id(int(cart[i]))
            total_cost += int(item[6])
            order.append(str(item[0]))
            await message.answer(f'{i + 1}. <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {item[3]}\n' +
                                 f'    <b>–¶–µ–Ω–∞</b>: {item[6]}', parse_mode='HTML')
        order = ', '.join(order)
        await message.answer(f'<b>üí∞–ò—Ç–æ–≥–æ</b>: {total_cost} ‚ÇΩ\n' +
                             f'----------------\n', parse_mode='HTML')
        
        await state.update_data(user_id=data[0])
        await state.update_data(order=order)
        await state.update_data(total_cost=total_cost)
        await asyncio.sleep(1)
        await state.set_state(NewOrder.full_name)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§–ò–û")
        
        

@cart_router.message(NewOrder.full_name)
async def set_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(NewOrder.adress)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    
@cart_router.message(NewOrder.adress)
async def set_full_name(message: Message, state: FSMContext):
    await state.update_data(adress=message.text)
    await state.set_state(NewOrder.phone)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    
    
@cart_router.message(NewOrder.phone)
async def set_full_name(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(NewOrder.email)
    await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –≤–≤–µ–¥–∏—Ç–µ email")
    
    
@cart_router.message(NewOrder.email)
async def set_full_name(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    data = await state.get_data()
    await message.answer("üî∏–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:")
    await message.answer(f'<b>–§–ò–û:</b> {data["full_name"]}\n' +
                         f'<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {data["adress"]}\n' +
                         f'<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data["phone"]}\n' +
                         f'<b>Email:</b> {data["email"]}\n' +
                         f'<b>–¢–æ–≤–∞—Ä—ã(–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞):</b> {data["order"]}\n' +
                         f'<b>–ò—Ç–æ–≥–æ:</b> {data["total_cost"]} ‚ÇΩ\n' +
                         f'----------------\n', parse_mode='HTML')
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑", reply_markup=keyboards.confirm)

    
    
@cart_router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await callback.message.delete()
    print(data)
    await add_order_db(data)
    PRICE = LabeledPrice(label='–¢–æ–≤–∞—Ä—ã', amount=data["total_cost"] * 100)
    TOKEN = os.getenv('PAYMENTS_TOKEN')
    #await add_order_db(data)
    await bot.send_invoice(
                            callback.from_user.id,
                            title='–ü–ª–∞—Ç–µ–∂',
                            description='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
                            provider_token=TOKEN,
                            currency='rub',
                            photo_url='https://runamagik.ru/wp-content/uploads/2023/12/JxUtcBpNOfM.jpg',
                            photo_height=1280,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                            photo_width=1026,
                            photo_size=1000,
                            is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                            prices=[PRICE],
                            start_parameter='time-machine-example',
                            payload='some-invoice-payload-for-our-internal-use',
                            request_timeout=60
    )
    await state.clear()
    if callback.from_user.id == int(os.getenv('ADMIN_ID')):
        await callback.message.answer_sticker('CAACAgIAAx0Cd9gAAe8AAypl6eHRwL3TUQhDivk2zOnK4Zqz-wACHAEAAjDUnRFu6owpqq4XTjQE')
        await asyncio.sleep(1)
        await callback.message.answer(f'–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢–æ–≤–∞—Ä —É–∂–µ –≤ –ø—É—Ç–∏\n' +
                                  f'‚ÄºÔ∏è–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π. –û–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
                                  reply_markup=keyboards.start_admin_keyboard, show_alert=True)
    else:
        await callback.message.answer(f'–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n' +
                                  f'‚ÄºÔ∏è–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π. –û–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
                                  reply_markup=keyboards.start_keyboard, show_alert=True)
    
    
    
@cart_router.shipping_query(F.shipping_query)
async def shipping(shipping_query: ShippingQuery):
    await shipping_query.answer(ok=True)
    print("SHIPPING: ")
    print(shipping_query)
    
    
@cart_router.message(F.pre_checkout_query)
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    print(pre_checkout_query)
    
    
@cart_router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    print("SUCCESSFUL PAYMENT!")