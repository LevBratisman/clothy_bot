from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
import asyncio
import os

from app import keyboards
from app.database import update_cart_id, add_item_db, get_data_by_id, delete_item_db, update_item_db, get_users_id, get_orders_db, get_items_db, get_users_db_ten, get_users_db



admin_router = Router()


class NewItem(StatesGroup):
    type = State()
    subtype = State()
    name = State()
    desc = State()
    price = State()
    photo = State()
    brand = State()
    
    
class UpdateItem(StatesGroup):
    id = State()
    type = State()
    subtype = State()
    name = State()
    desc = State()
    price = State()
    photo = State()
    brand = State()
    
    
class DelItem(StatesGroup):
    id = State()
    
    
class SendAll(StatesGroup):
    photo = State()
    message = State()
    
    
@admin_router.message(F.text == "üîÑ–°–±—Ä–æ—Å–∏—Ç—å")
async def back_to_manu(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=keyboards.admin_panel)
        await state.clear()


@admin_router.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
async def back_to_manu(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboards.start_admin_keyboard)
        await state.clear()
    else:
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboards.start_keyboard)
    
    
@admin_router.message(F.text == "‚öôÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def back_to_manu(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboards.admin_panel)
        
        
# Statistic ------------------------------------------
      
@admin_router.message(F.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def get_statistic(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> " + str(len(await get_users_id())),
                             parse_mode="HTML")
        await message.answer("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b> " + str(len(await get_orders_db())), 
                             parse_mode="HTML")
        await message.answer("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> " + str(len(await get_items_db())), 
                             parse_mode="HTML")
        await message.answer(f'-------------------------------\n' +
                             f' <i>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i>', parse_mode="HTML")
        data = await get_users_db_ten()
        for i in range(len(data)):
            await message.answer(f"{i+1} - <b>{data[i][1]}, {data[i][2]}</b>", parse_mode="HTML")
        

# Deleting ------------------------------------------

@admin_router.message(F.text == "üö´–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def back_to_manu(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await state.clear()
        await state.set_state(DelItem.id)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞:")
        

@admin_router.message(DelItem.id)
async def back_to_manu(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        try: 
            await delete_item_db(int(message.text))
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        else:
            await message.answer("–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            data = await get_users_db()
            for i in range(len(data)):
                if data[i][4] is not None:
                    cart = data[i][4].split(', ')
                    if message.text in cart:
                        cart.remove(message.text)
                        if len(cart) == 0:
                            cart = None
                            await update_cart_id(data[i][1], cart)
                        else:
                            await update_cart_id(data[i][1], ', '.join(cart))
            await message.answer("–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            await state.clear()
        
        
# Updating ------------------------------------------
        
        
@admin_router.message(F.text == "üîÅ–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def update_item(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await state.clear()
        await state.set_state(UpdateItem.id)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
        
        
@admin_router.message(UpdateItem.id)
async def add_item_name(message: Message, state: FSMContext):
    try:
        await state.update_data(id=int(message.text))
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        item = await get_data_by_id(int(message.text))
        print(item)
        if item is None:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            update_item(message, state)
        else:
            await state.set_state(UpdateItem.type)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboards.catalog)
        
        
@admin_router.callback_query(UpdateItem.type)
async def add_item_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type=callback.data)
    if callback.data == "–æ–±—É–≤—å":
        await state.set_state(UpdateItem.subtype)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_shoes)
    elif callback.data == "–æ–¥–µ–∂–¥–∞":
        await state.set_state(UpdateItem.subtype)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_clothes)
    elif callback.data == "–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã":
        await state.set_state(UpdateItem.subtype)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_headdress)
        
@admin_router.callback_query(UpdateItem.subtype)
async def add_item_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(subtype=callback.data)
    await state.set_state(UpdateItem.name)
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    
    
@admin_router.message(UpdateItem.name)
async def add_item_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UpdateItem.brand)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞")
    
    
@admin_router.message(UpdateItem.brand)
async def add_item_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await state.set_state(UpdateItem.desc)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    
    
@admin_router.message(UpdateItem.desc)
async def add_item_desc(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await state.set_state(UpdateItem.price)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
    
    
@admin_router.message(UpdateItem.price)
async def add_item_price(message: Message, state: FSMContext):
    try:
        await state.update_data(price=int(message.text))
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        await state.set_state(UpdateItem.photo)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞")
    
    
@admin_router.message(lambda message: not message.photo, UpdateItem.photo)
async def check_photo(message: Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
    
    
@admin_router.message(F.content_type == ContentType.PHOTO, UpdateItem.photo)
async def add_item_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[0].file_id)
    data = await state.get_data()
    await update_item_db(data)
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await message.answer_photo(data["photo"], caption=f'<b>#Ô∏è‚É£–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>: {data["id"]}\n' +
                                                                        f'<b>üè∑–¢–∏–ø</b>: {data["type"]}\n' + 
                                                                        f'<b>üîß–ü–æ–¥—Ç–∏–ø</b>: {data["subtype"]}\n' +
                                                                        f'<b>üî§–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data["name"]}\n' +
                                                                        f'<b>üåê–ë—Ä–µ–Ω–¥</b>: {data["brand"]}\n' +
                                                                        f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data["desc"]}\n' +
                                                                        f'<b>üí∞–¶–µ–Ω–∞</b>: {data["price"]}', parse_mode='HTML')
    await state.clear()
        
        
# Adding ------------------------------------------
        
        
@admin_router.message(F.text == "üÜï–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def back_to_manu(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await state.clear()
        await state.set_state(NewItem.type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboards.catalog)


@admin_router.callback_query(NewItem.type)
async def add_item_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type=callback.data)
    if callback.data == "–æ–±—É–≤—å":
        await state.set_state(NewItem.subtype)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_shoes)
    elif callback.data == "–æ–¥–µ–∂–¥–∞":
        await state.set_state(NewItem.subtype)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_clothes)
    elif callback.data == "–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã":
        await state.set_state(NewItem.subtype)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_headdress)
        
@admin_router.callback_query(NewItem.subtype)
async def add_item_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(subtype=callback.data)
    await state.set_state(NewItem.name)
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    
    
@admin_router.message(NewItem.name)
async def add_item_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(NewItem.brand)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞")
    
    
@admin_router.message(NewItem.brand)
async def add_item_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await state.set_state(NewItem.desc)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    
    
@admin_router.message(NewItem.desc)
async def add_item_desc(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await state.set_state(NewItem.price)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
    
    
@admin_router.message(NewItem.price)
async def add_item_price(message: Message, state: FSMContext):
    try:
        await state.update_data(price=int(message.text))
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        await state.set_state(NewItem.photo)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞")
    
    
@admin_router.message(lambda message: not message.photo, NewItem.photo)
async def check_photo(message: Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
    
    
@admin_router.message(F.content_type == ContentType.PHOTO, NewItem.photo)
async def add_item_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[0].file_id)
    data = await state.get_data()
    await add_item_db(data)
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await message.answer_photo(data["photo"], caption=f'<b>üè∑–¢–∏–ø</b>: {data["type"]}\n' + 
                                                        f'<b>üîß–ü–æ–¥—Ç–∏–ø</b>: {data["subtype"]}\n' +
                                                        f'<b>üî§–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data["name"]}\n' +
                                                        f'<b>üåê–ë—Ä–µ–Ω–¥</b>: {data["brand"]}\n' +
                                                        f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data["desc"]}\n' +
                                                        f'<b>üí∞–¶–µ–Ω–∞</b>: {data["price"]}', parse_mode='HTML')
    await state.clear()
    
    
    
# SENDALL


@admin_router.message(F.text == "üîâ–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def send_all(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await state.clear()
        await state.set_state(SendAll.photo)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ 'n', –µ—Å–ª–∏ –ø–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)")
    
    
@admin_router.message(SendAll.photo)
async def back_to_manu(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        try:
            await state.update_data(photo=message.photo[0].file_id)
        except:
            await message.answer("–ü–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            await state.update_data(photo=None)
        await state.set_state(SendAll.message)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    
@admin_router.message(SendAll.message)
async def send_all_message(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(message=message.text)
    message_data = await state.get_data()
    data = await get_users_id()
    print(data)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    if message_data["photo"] is None:
        for i in range(len(data)):
            await bot.send_message(str(data[i][0]), message_data["message"])
    else:
        for i in range(len(data)):
            await bot.send_photo(str(data[i][0]), message_data["photo"], caption=message_data["message"])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await state.clear()