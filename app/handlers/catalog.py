from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.enums import ContentType
import json

import asyncio
import os

from app import keyboards
from app.database import get_data_by_type, get_user_data_by_user_id, add_item_to_cart_db, get_data_by_id, update_cart_id, get_item_by_type_subtype


catalog_router = Router()


class ItemFilter(StatesGroup):
    type = State()
    subtype = State()
    

@catalog_router.message((F.text == "üõÑ–ö–∞—Ç–∞–ª–æ–≥") | (F.text == "/catalog"))
async def catalog(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ItemFilter.type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboards.catalog)
    
    
@catalog_router.callback_query(ItemFilter.type)
async def get_subtypes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type=callback.data)
    if callback.data == "–æ–±—É–≤—å":
        await state.set_state(ItemFilter.subtype)
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_shoes)
    elif callback.data == "–æ–¥–µ–∂–¥–∞":
        await state.set_state(ItemFilter.subtype)
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_clothes)
    elif callback.data == "–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã":
        await state.set_state(ItemFilter.subtype)
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboards.subtype_headdress)
        
        
@catalog_router.callback_query(ItemFilter.subtype)
async def add_item_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(subtype=callback.data)
    data = await state.get_data()
    if data["type"] == "–æ–±—É–≤—å":
        await get_shoes(callback, state)
    elif data["type"] == "–æ–¥–µ–∂–¥–∞":
        await get_clothes(callback, state)
    elif data["type"] == "–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã":
        await get_headdress(callback, state)
        


@catalog_router.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
async def back_to_manu(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboards.start_admin_keyboard)
    else:
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboards.start_keyboard)
    

    
@catalog_router.message(F.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞")
async def basket(message: Message):
    data = await get_user_data_by_user_id(message.from_user.id)
    prev_cart = data[4]
    if prev_cart is None:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        prev_cart = prev_cart.split(', ')
        for i in range(len(prev_cart)):
            item = await get_data_by_id(int(prev_cart[i]))
            print(item)
            await message.answer_photo(item[7], caption=f'<b>#Ô∏è‚É£–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>: {item[0]}\n' +
                                                                        f'<b>üè∑–¢–∏–ø</b>: {item[1]}\n' + 
                                                                        f'<b>üîß–ü–æ–¥—Ç–∏–ø</b>: {item[2]}\n' + 
                                                                        f'<b>üî§–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {item[3]}\n' +
                                                                        f'<b>üåê–ë—Ä–µ–Ω–¥</b>: {item[4]}\n' + 
                                                                        f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ</b>: {item[5]}\n' +
                                                                        f'<b>üí∞–¶–µ–Ω–∞</b>: {item[6]}', parse_mode='HTML',
                                                        reply_markup=keyboards.item_in_cart)
        await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', reply_markup=keyboards.cart)

    
    
@catalog_router.callback_query(F.data == "–æ–±—É–≤—å")
async def get_shoes(callback: Message, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ '–û–±—É–≤—å'")
    filter_data = await state.get_data()
    if filter_data["subtype"] == "nomatter":
        data = await get_data_by_type(filter_data["type"])
    else:
        data = await get_item_by_type_subtype(filter_data["type"], filter_data["subtype"])
        
    if data == []:
        await callback.message.answer("–ü—É—Å—Ç–æ..")
    else:
        await callback.message.edit_text('–û–±—É–≤—å')
        await callback.message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä...')
        await asyncio.sleep(1)
        for item in range(len(data)):
            await asyncio.sleep(0.3)
            await callback.message.answer_photo(data[item][7], caption=f'<b>#Ô∏è‚É£–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>: {data[item][0]}\n' +
                                                                        f'<b>üè∑–¢–∏–ø</b>: {data[item][1]}\n' + 
                                                                        f'<b>üîß–ü–æ–¥—Ç–∏–ø</b>: {data[item][2]}\n' + 
                                                                        f'<b>üî§–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data[item][3]}\n' +
                                                                        f'<b>üåê–ë—Ä–µ–Ω–¥</b>: {data[item][4]}\n' + 
                                                                        f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data[item][5]}\n' +
                                                                        f'<b>üí∞–¶–µ–Ω–∞</b>: {data[item][6]}', parse_mode='HTML',
                                                                        reply_markup=keyboards.item)
        await state.clear()

    
@catalog_router.callback_query(F.data == "–æ–¥–µ–∂–¥–∞")
async def get_clothes(callback: Message, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ '–û–¥–µ–∂–¥–∞'")
    filter_data = await state.get_data()
    if filter_data["subtype"] == "nomatter":
        data = await get_data_by_type(filter_data["type"])
    else:
        data = await get_item_by_type_subtype(filter_data["type"], filter_data["subtype"])
        
    if data == []:
        await callback.message.answer("–ü—É—Å—Ç–æ..")
    else:
        await callback.message.edit_text('–û–¥–µ–∂–¥–∞')
        await callback.message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä...')
        await asyncio.sleep(1)
        for item in range(len(data)):
            await asyncio.sleep(0.3)
            await callback.message.answer_photo(data[item][7], caption=f'<b>#Ô∏è‚É£–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>: {data[item][0]}\n' +
                                                                        f'<b>üè∑–¢–∏–ø</b>: {data[item][1]}\n' + 
                                                                        f'<b>üîß–ü–æ–¥—Ç–∏–ø</b>: {data[item][2]}\n' + 
                                                                        f'<b>üî§–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data[item][3]}\n' +
                                                                        f'<b>üåê–ë—Ä–µ–Ω–¥</b>: {data[item][4]}\n' + 
                                                                        f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data[item][5]}\n' +
                                                                        f'<b>üí∞–¶–µ–Ω–∞</b>: {data[item][6]}', parse_mode='HTML',
                                                                        reply_markup=keyboards.item)
        await state.clear()
        
    
    
@catalog_router.callback_query(F.data == "–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã")
async def get_headdress(callback: Message, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ '–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã'")
    filter_data = await state.get_data()
    if filter_data["subtype"] == "nomatter":
        data = await get_data_by_type(filter_data["type"])
    else:
        data = await get_item_by_type_subtype(filter_data["type"], filter_data["subtype"])
        
    if data == []:
        await callback.message.answer("–ü—É—Å—Ç–æ..")
    else:
        await callback.message.edit_text('–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã')
        await callback.message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä...')
        await asyncio.sleep(1)
        for item in range(len(data)):
            await asyncio.sleep(0.3)
            await callback.message.answer_photo(data[item][7], caption=f'<b>#Ô∏è‚É£–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</b>: {data[item][0]}\n' +
                                                                        f'<b>üè∑–¢–∏–ø</b>: {data[item][1]}\n' + 
                                                                        f'<b>üîß–ü–æ–¥—Ç–∏–ø</b>: {data[item][2]}\n' + 
                                                                        f'<b>üî§–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data[item][3]}\n' +
                                                                        f'<b>üåê–ë—Ä–µ–Ω–¥</b>: {data[item][4]}\n' + 
                                                                        f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data[item][5]}\n' +
                                                                        f'<b>üí∞–¶–µ–Ω–∞</b>: {data[item][6]}', parse_mode='HTML',
                                                                        reply_markup=keyboards.item)
        await state.clear()
            
            
async def get_id_by_caption(caption):
    index_start = caption.find(': ') + 2
    index_finish = caption.find('\n')
    id = caption[index_start:index_finish]
    return id

            
@catalog_router.callback_query(F.data == "to_cart")
async def add_item_to_cart(callback: CallbackQuery):
    i_id = await get_id_by_caption(callback.message.caption)
    data = await get_user_data_by_user_id(callback.from_user.id)
    prev_cart = data[4]
    
    if prev_cart is None:
        prev_cart = i_id
    elif i_id in prev_cart:
        await callback.answer("–¢–∞–∫–æ–∏ÃÜ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ!")
        return
    else:
        prev_cart += f', {i_id}'
        
    await add_item_to_cart_db(callback.from_user.id, prev_cart)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    
    
@catalog_router.callback_query(F.data == "from_cart")
async def del_item_from_cart(callback: CallbackQuery):
    i_id = await get_id_by_caption(callback.message.caption)
    data = await get_user_data_by_user_id(callback.from_user.id)
    cart = data[4].split(', ')
    cart.remove(i_id)
    
    if len(cart) == 0:
        cart = None
        await update_cart_id(callback.from_user.id, cart)
        await callback.message.delete()
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
        if callback.from_user.id == int(os.getenv('ADMIN_ID')):
            await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=keyboards.start_admin_keyboard)
        else:
            await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" , reply_markup=keyboards.start_keyboard)
    else:
        cart = ', '.join(cart)
        await update_cart_id(callback.from_user.id, cart)
        await callback.message.delete()
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    
